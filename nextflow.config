params {
    bam_folder = false
    output_dir = false
    pathseq_db = false
    spaceranger_bam_path = "outs/possorted_genome_bam.bam"
    spaceranger_barcodes_path = "outs/raw_feature_bc_matrix/barcodes.tsv.gz"

    pathseq_mem_gb = 120
    pathseq_cpus = 8
    pathseq_min_clipped_read_length = 60
    pathseq_min_score_identity = ".7"

    cellranger_version = "6.1.1"
    gex_chemistry = "auto"
    microb_chemistry = "SC5P-PE"

    container__pathseq = "broadinstitute/gatk:4.3.0.0"
    container__python = "quay.io/fhcrc-microbiome/python-pandas:0fd1e29"
    container__cellranger = "quay.io/cumulus/cellranger:${params.cellranger_version}"
    container__bedtools = "quay.io/biocontainers/bedtools:2.23.0--h5b5514e_6"
    container__fastqc = "quay.io/biocontainers/fastqc:0.11.9--0"
    container__trimmomatic = "quay.io/biocontainers/trimmomatic:0.32--hdfd78af_4"
    container__picard = "quay.io/biocontainers/picard:2.27.4--hdfd78af_0"

    max_cpus = 32
    max_memory = '240.GB'

    pathseq_subfolder = "pathseq"
}

process {
    withLabel: io_limited {
        cpus   = { check_max( 2    * task.attempt, 'cpus'   ) }
        memory = { check_max( 6.GB * task.attempt, 'memory' ) }
    }
    withLabel: cpu_large {
        cpus   = { check_max( 16    * task.attempt, 'cpus'   ) }
        memory = { check_max( 30.GB * task.attempt, 'memory' ) }
    }
    withLabel: mem_large {
        cpus   = { check_max( 16    * task.attempt, 'cpus'   ) }
        memory = { check_max( 120.GB * task.attempt, 'memory' ) }
    }

}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}